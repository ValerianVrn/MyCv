@using MyCv.UI.Components.Shared
@using static MyCv.UI.Components.Shared.CodeBlock

<ContentSection SectionId="design-patterns" SectionName="Design patterns">

    <MudText>
        J'encourage et fait découvrir aux développeurs des <MudLink Href="https://refactoring.guru/design-patterns">design patterns</MudLink> qui rendent le code plus maintenable.
        Je milite compte le code séquentiel d'un bloc de 1000 lignes.
    </MudText>
    <MudText>
        Voici un pseudo-code adapté pour l'exemple d'une expérience passée pour laquelle j'ai proposé l'utilisation de Strategy :
    </MudText>
    <CodeBlock Language="@CodeBlock.CodeLanguage.CSharp" Code="@rawCode" Tooltips="@tooltipMap" IdentifiedCodeTokenTypes="@identifiedCodeTokenTypes" />
</ContentSection>

@code {
    private string rawCode = @"
if ()
{
else if ()...
}
}";

    private Dictionary<string, Tooltip> tooltipMap = new()
        {
            ["internal"] = new("Accessibilité", "Modificateur d'accès public", "Modificateur d'accès public", "Modificateur d'accès public", 1),
            ["SetRatingCommandHandler"] = new("SRP", "Modificateur d'accès public", "Modificateur d'accès public", "Modificateur d'accès public", 1),
            ["IRepository repository"] = new("DI", "Modificateur d'accès public", "Modificateur d'accès public", "Injection d'interface pour testabilité", 1),
            ["IRepository _repository"] = new("DI", "Modificateur d'accès public", "Modificateur d'accès public", "Modificateur d'accès public", 1),
            ["_repository"] = new("Naming convention", "Modificateur d'accès public", "Modificateur d'accès public", "Modificateur d'accès public", 1),
            ["/// <summary>"] = new("Commentaires", "Modificateur d'accès public", "Modificateur d'accès public", "https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/", 1),
            ["// Update the Rating"] = new("Commentaires", "Modificateur d'accès public", "Modificateur d'accès public", "https://learn.microsoft.com/en-us/dotnet/standard/design-guidelines/", 1),
            ["async"] = new("Naming convention", "Modificateur d'accès public", "Modificateur d'accès public", "https://learn.microsoft.com/en-us/dotnet/csharp/fundamentals/coding-style/coding-conventions", 1),
        };

    private List<IdentifiedCodeTokenType> identifiedCodeTokenTypes = new()
        {
            new("Customer", CodeTokenType.TypeName, 1)
        };
}
